---

#- name: install dedendency
#  package:
#    name: "{{ harbor_packages }}"
#    state: present

- block:

    - name: create local temporary path
      become: false
      file:
        path: "{{ local_tmp_directory }}"
        state: directory
      delegate_to: localhost

    - name: "Downloading Harbor {{ harbor_version }} (offline installer)"
      get_url:
        url: "{{ harbor_url }}"
        dest: "{{ local_tmp_directory }}/harbor-{{ harbor_version }}.tgz"
        validate_certs: false
      become: false
      delegate_to: localhost

    - name: deploy application archiv
      copy:
        src: "{{ local_tmp_directory }}/harbor-{{ harbor_version }}.tgz"
        dest: "/tmp/harbor.tgz"
        mode: 0644

  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Creating Harbor directory... ({{ harbor_install_dir }}/harbor)"
  file:
    path: "{{ harbor_install_dir }}"
    state: directory
    mode: 0644
    # mode: o+r
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Uncompressing Harbor installer..."
  unarchive:
    remote_src: true
    src: /tmp/harbor.tgz
    dest: "{{ harbor_install_dir }}"
    creates: "{{ harbor_install_dir }}/harbor"
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Creating SSL certs folder
  file:
    path: '{{ harbor_ssl_cert | dirname }}'
    state: directory
    mode: 0750
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Generate self-signed cert with openssl
  command: openssl req -newkey rsa:4096 -nodes  -sha256 -keyout '{{ harbor_ssl_cert_key }}' -subj '{{ harbor_ssl_self_subject }}' -new  -x509 -days '{{ harbor_ssl_self_days }}' -out '{{ harbor_ssl_cert }}'
  args:
    creates: '{{ harbor_ssl_cert }}' # don't write over a cert
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Commenting required line on Nginx configuration if harbor_behind_proxy is set
  replace:
    path: "{{ harbor_install_dir }}/harbor/common/templates/nginx/{{ item }}"
    regexp: '(proxy_set_header X-Forwarded-Proto \$\$scheme;)'
    replace: '# \1'
    backup: true
  when: harbor_behind_proxy is defined and harbor_behind_proxy
  with_items:
    - "nginx.http.conf"
    - "nginx.https.conf"

- name: Running Harbor installer...
  become: true
  command: "./install.sh {{ harbor_installer_with }} {{ harbor_installer_extra_args }}"
  args:
    chdir: "{{ harbor_install_dir }}/harbor"
    creates: '{{ harbor_install_dir }}/harbor/harbor_install_log.txt'
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
    TERM: xterm
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)
