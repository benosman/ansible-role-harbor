---

- name: create systemd service unit
  template:
    src: "docker-compose.service.j2"
    dest: "{{ systemd_lib_directory }}/harbor.service"
    owner: root
    group: root
    mode: 0644

- name: install dedendency
  package:
    name: "{{ harbor_packages }}"
    state: present

- block:
    - name: create local temporary path
      become: false
      file:
        path: "{{ local_tmp_directory }}"
        state: directory
        mode: 0700
      delegate_to: localhost

    - name: "Downloading Harbor {{ harbor_version }} (offline installer)"
      get_url:
        url: "{{ harbor_url }}"
        dest: "{{ local_tmp_directory }}/harbor-{{ harbor_version }}.tgz"
        validate_certs: false
      become: false
      delegate_to: localhost

    - name: deploy application archiv
      copy:
        src: "{{ local_tmp_directory }}/harbor-{{ harbor_version }}.tgz"
        dest: "/tmp/harbor.tgz"
        mode: 0644

  when:
    - not harbor_folder_st.stat.exists # or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Creating Harbor directory... ({{ harbor_install_dir }}/harbor)"
  file:
    path: "{{ harbor_install_dir }}"
    state: directory
    mode: 0644
  when:
    - not harbor_folder_st.stat.exists # or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Uncompressing Harbor installer..."
  unarchive:
    remote_src: true
    src: /tmp/harbor.tgz
    dest: "{{ harbor_install_dir }}"
    mode: 0750
    # creates: "{{ harbor_install_dir }}/harbor"
  when:
    - not harbor_folder_st.stat.exists | bool # or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Creating SSL certs folder
  file:
    path: '{{ harbor_ssl_cert | dirname }}'
    state: directory
    mode: 0750
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Generate self-signed cert with openssl
  command: |
    openssl req
    -newkey rsa:4096
    -nodes
    -sha256
    -keyout '{{ harbor_ssl_cert_key }}'
    -subj '{{ harbor_ssl_self_subject }}'
    -new
    -x509
    -days '{{ harbor_ssl_self_days }}'
    -out '{{ harbor_ssl_cert }}'
  args:
    creates: '{{ harbor_ssl_cert }}' # don't write over a cert
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Commenting required line on Nginx configuration if harbor_behind_proxy is set
  replace:
    path: "{{ harbor_install_dir }}/harbor/common/templates/nginx/{{ item }}"
    regexp: '(proxy_set_header X-Forwarded-Proto \$\$scheme;)'
    replace: '# \1'
    backup: true
  when: harbor_behind_proxy is defined and harbor_behind_proxy
  with_items:
    - "nginx.http.conf"
    - "nginx.https.conf"

# pre-configure

- name: Copying over harbor.yml
  template:
    src: harbor.yml.j2
    dest: "{{ harbor_install_dir }}/harbor/harbor.yml"
    mode: 0640
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

# - name: Copying over docker-compose.yml
#   template:
#     src: docker-compose.yml.j2
#     dest: "{{ harbor_install_dir }}/harbor/docker-compose.yml"
#     mode: 0640
#   when:
#     - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: ensure that prepare script are executable
  file:
    name: "{{ harbor_install_dir }}/harbor/prepare"
    mode: 0750
# - name: Copying over prepare script
#   template:
#     src: prepare.j2
#     dest: "{{ harbor_install_dir }}/harbor/prepare"
#     mode: 0750
#     # mode: a+x
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Running Harbor installer in {{ harbor_install_dir }}/harbor ...
  become: true
  command: |
    /bin/bash ./install.sh {{ harbor_installer_with | default([]) | join(' ') }} {{ harbor_installer_extra_args }}
  args:
    chdir: "{{ harbor_install_dir }}/harbor"
    creates: '{{ harbor_install_dir }}/harbor/harbor_install_log.txt'
  environment:
    SHELL: /bin/bash
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
    TERM: xterm
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: collect facts about system services
  service_facts:
  register: services_state

- name: Debug
  debug:
    var: services_state.services.harbor

- name: wait 15 seconds for clean startup
  pause:
    seconds: 15

- name: wait for health
  uri:
    url: "http://127.0.0.1/api/version"
    method: GET
#    user: "admin"
#    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 200
    headers:
      Content-Type: application/json
    body_format: json
    #force_basic_auth: true
    return_content: true
  register: _harbor_version
  until: _harbor_version is succeeded
  ignore_errors: false
  retries: 10
  delay: 10

- debug:
    msg: "{{ harbor_version }}"
