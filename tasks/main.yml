---
#- name: Installing docker python bindings
#  become: true
#  pip:
#    state: present
#    name:
#      - docker
#      - pyyaml>=3.11
#      - docker-compose>=1.7.0

# - name: Installing docker-compose
#   become: true
#   get_url: url={{ http_server }}/docker-compose-Linux-x86_64 dest=/usr/local/bin/docker-compose validate_certs=no
#
# - name: Chmod docker-compose
#   become: true
#   file:
#     path: /usr/local/bin/docker-compose
#     owner: 1000
#     group: 1000
#     mode: 0750

- name: Checking if Harbor is already installed
  stat:
    path: "{{ harbor_install_dir }}/harbor/harbor.yml"
  register: harbor_folder_st

- name: install dedendency
  package:
    name: "{{ harbor_packages }}"
    state: present

- block:

    - name: create local temporary path
      become: false
      file:
        path: "{{ local_tmp_directory }}"
        state: directory
      delegate_to: localhost

    - name: "Downloading Harbor {{ harbor_version }} (offline installer)"
      get_url:
        url: "{{ harbor_url }}"
        dest: "{{ local_tmp_directory }}/harbor-{{ harbor_version }}.tgz"
        validate_certs: false
      become: false
      delegate_to: localhost

    - name: deploy application archiv
      copy:
        src: "{{ local_tmp_directory }}/harbor-{{ harbor_version }}.tgz"
        dest: "/tmp/harbor.tgz"
        mode: 0644

  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Creating Harbor directory... ({{ harbor_install_dir }}/harbor)"
  file:
    path: "{{ harbor_install_dir }}"
    state: directory
    mode: 0644
    # mode: o+r
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Uncompressing Harbor installer..."
  unarchive:
    remote_src: true
    src: /tmp/harbor.tgz
    dest: "{{ harbor_install_dir }}"
    creates: "{{ harbor_install_dir }}/harbor"
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Copying over harbor.yml
  template:
    src: harbor.yml.j2
    dest: "{{ harbor_install_dir }}/harbor/harbor.yml"
    mode: 0640
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Copying over docker-compose.yml
  template:
    src: docker-compose.yml.j2
    dest: "{{ harbor_install_dir }}/harbor/docker-compose.yml"
    mode: 0640
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Copying over prepare script
  template:
    src: prepare.j2
    dest: "{{ harbor_install_dir }}/harbor/prepare"
    mode: 0640
    # mode: a+x
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Creating SSL certs folder
  file:
    path: '{{ harbor_ssl_cert | dirname }}'
    state: directory
    mode: 0750
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Generate self-signed cert with openssl
  command: openssl req -newkey rsa:4096 -nodes  -sha256 -keyout '{{ harbor_ssl_cert_key }}' -subj '{{ harbor_ssl_self_subject }}' -new  -x509 -days '{{ harbor_ssl_self_days }}' -out '{{ harbor_ssl_cert }}'
  args:
    creates: '{{ harbor_ssl_cert }}' # don't write over a cert
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: Commenting required line on Nginx configuration if harbor_behind_proxy is set
  replace:
    path: "{{ harbor_install_dir }}/harbor/common/templates/nginx/{{ item }}"
    regexp: '(proxy_set_header X-Forwarded-Proto \$\$scheme;)'
    replace: '# \1'
    backup: true
  when: harbor_behind_proxy is defined and harbor_behind_proxy
  with_items:
    - "nginx.http.conf"
    - "nginx.https.conf"

- name: Running Harbor installer...
  become: true
  command: "./install.sh {{ harbor_installer_with }} {{ harbor_installer_extra_args }}"
  args:
    chdir: "{{ harbor_install_dir }}/harbor"
    creates: '{{ harbor_install_dir }}/harbor/harbor_install_log.txt'
  environment:
    TERM: xterm-256color
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Setting permissions on Harbor common folder......"
  file:
    dest: "{{ harbor_install_dir }}/harbor/common"
    owner: 10000
    mode: 0750
    group: docker
    recurse: true
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)

- name: "Setting permissions on nginx folder specifically..."
  file:
    dest: "{{ harbor_install_dir }}/harbor/common/config/nginx"
    owner: 10000
    mode: o+rx
    group: docker
    recurse: true
  when:
    - not harbor_folder_st.stat.exists or (harbor_folder_st.stat.isdir is defined and not harbor_folder_st.stat.isdir)


- name: Changing registry realm if harbor_registry_realm_protocol is different from harbor_ui_url_protocol
  replace:
    path: "{{ harbor_install_dir }}/harbor/common/config/registry/config.yml"
    regexp: 'realm: (https|http)://(.*)'
    replace: 'realm: {{ harbor_registry_realm_protocol }}://\2'
    backup: true
  when: harbor_behind_proxy is defined and harbor_behind_proxy and harbor_registry_realm_protocol != harbor_ui_url_protocol


- debug:
    msg: "Restarting Harbor because registry configuration changed"
  when: harbor_behind_proxy is defined and harbor_behind_proxy and harbor_registry_realm_protocol != harbor_ui_url_protocol

# Restart only if we changed the registry realm
- include_tasks: restart.yaml
  when: harbor_behind_proxy is defined and harbor_behind_proxy and harbor_registry_realm_protocol != harbor_ui_url_protocol

# - debug:
#     msg: "{{ lookup('template', 'templates/create_project.j2') }}"
#   when: harbor_projects is defined
#   with_items: "{{ harbor_projects }}"


- name: "Creating projects..."
  uri:
    url: "{{ harbor_api_url }}/projects"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: true
    return_content: true
    body: "{{ lookup('template', 'templates/create_project.j2') }}"
  when: harbor_projects is defined
  with_items: "{{ harbor_projects }}"


# - debug:
#     msg: "{{ lookup('template', 'templates/create_user.j2') }}"
#   when: harbor_users is defined and harbor_self_registration == "off"
#   with_items: "{{ harbor_users }}"


- name: "Creating users..."
  uri:
    url: "{{ harbor_api_url }}/users"
    method: POST
    user: "admin"
    password: "{{ harbor_admin_password | default('Harbor12345') }}"
    status_code:
      - 201
      - 409 # already created
    body_format: json
    force_basic_auth: true
    return_content: true
    body: "{{ lookup('template', 'templates/create_user.j2') }}"
  when: harbor_users is defined and harbor_self_registration == "off"
  with_items: "{{ harbor_users }}"
